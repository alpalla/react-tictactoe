{"version":3,"sources":["index.js"],"names":["Square","props","style","value","isWinningSquare","className","onClick","Board","i","this","squares","board","counter","row","j","push","renderSquare","createBoard","React","Component","Game","state","history","Array","fill","moveLocation","col","stepNumber","xIsNext","desc","slice","length","calculateWinner","newEntry","Math","floor","setState","concat","step","reverse","status","current","winner","moves","map","move","fontStyle","key","jumpTo","squareStyle","boardIsFull","handleClick","sortMoves","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d2b63be.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Square(props) {\n  const style = {\n    'color': props.value === 'X' ? 'black' : 'antiquewhite',\n    'background': props.style.isWinningSquare ? 'palegreen' : '#3fa292'\n  }\n  return (\n    <button className=\"square\" onClick={props.onClick} style={style}>\n      {props.value}\n    </button>\n  )\n}\n  \nclass Board extends React.Component {\n\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        style={this.props.style[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    const createBoard = () => {\n      let board = [];\n      let counter = 0;\n      for(let i = 0; i < 3; i++) {\n        let row = []\n        for(let j = 0; j < 3; j++) {\n          row.push(this.renderSquare(counter++))\n        }\n        board.push(<div className=\"board-row\">{row}</div>);\n      }\n      return board;\n    }\n    return (\n      createBoard()\n    );\n  }\n}\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        moveLocation: {row: null, col: null}\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      desc: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.desc ?\n      this.state.history.slice(0, this.state.stepNumber + 1) :\n      this.state.history.slice(this.state.stepNumber)\n    const current = this.state.desc ?\n      history[history.length - 1] : history[0];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    let newEntry = {\n      squares: squares,\n      moveLocation: {row: Math.floor(i / 3) + 1, col: i % 3 + 1}\n    }\n    this.setState({\n      history: this.state.desc ?\n        history.concat([newEntry]) : [newEntry].concat(history),\n      stepNumber: this.state.desc ?\n        history.length : 0,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  sortMoves() {\n    this.setState({\n      history: this.state.history.reverse(),\n      stepNumber: this.state.history.length - 1 - this.state.stepNumber,\n      desc: !this.state.desc\n    });\n  }\n\n  boardIsFull(step) {\n    for (let square of step.squares) {\n      if (square === null) \n      return false;\n    }\n    return true;\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const moves = step.moveLocation.row !== null ?\n      'Go to move #' + (this.state.desc ? move : history.length - 1 - move)\n        + ' at row: '+ step.moveLocation.row + ', col: ' + step.moveLocation.col:\n      'Go to game start';\n      const fontStyle = {'fontWeight': this.state.stepNumber === move ? 'bold' : 'normal'};\n      return (\n        <li key={move}>\n          <button\n            onClick={() => this.jumpTo(move)}\n            style={fontStyle}>\n            {moves}\n          </button>\n        </li>\n      )\n    })\n    let status;\n    let squareStyle = new Array(9);\n    squareStyle.fill({'isWinningSquare': false});\n    let isWinningSquare = {'isWinningSquare': true}\n    if (winner) {\n      status = 'Winner: ' + current.squares[winner[0]];\n      squareStyle[winner[0]] = squareStyle[winner[1]] = squareStyle[winner[2]] = isWinningSquare;\n      \n    } else if (this.boardIsFull(current)) {\n      status = 'Draw!'\n    } \n    else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            style={squareStyle}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div className=\"status\">{status}</div>\n          <button onClick={() => this.sortMoves()}>Sort moves</button>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n  \n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return [a, b, c];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}